#!/bin/bash

set -e

# Default versions
GCC_VERSION="9.3.0"
BINUTILS_VERSION="2.34"
NEWLIB_VERSION="3.3.0"

# Default directories
PREFIX="/usr/local/sh-elf"
TARGET="sh-elf"
TOOLCHAIN_DIR=$HOME/sh-elf-toolchain

# Parse command-line options
BUILD_GCC=false
BUILD_LIBGCC=false
BUILD_BINUTILS=false
BUILD_NEWLIB=false
BUILD_ALL=false

while getopts "ablgn" OPTION; do
  case $OPTION in
    a)
      BUILD_ALL=true
      ;;
    b)
      BUILD_BINUTILS=true
      ;;
    g)
      BUILD_GCC=true
      ;;
    n)
      BUILD_NEWLIB=true
      ;;
    lg)
      BUILD_LIBGCC=true
  esac
done

if $BUILD_ALL; then
  BUILD_GCC=true
  BUILD_BINUTILS=true
  BUILD_NEWLIB=true
  BUILD_LIBGCC=true
fi

# Set environment variables
export PATH="$PREFIX/bin:$PATH"
mkdir -p $TOOLCHAIN_DIR
cd $TOOLCHAIN_DIR
export NUM_PROC=$(nproc)
source ~/.bashrc


# Functions to build each component
build_binutils() {
if ! [ -f "binutils-$BINUTILS_VERSION.tar.gz" ]; then
  curl -O https://sourceware.org/pub/binutils/releases/binutils-$BINUTILS_VERSION.tar.gz
fi
if ! [ -d "binutils-$BINUTILS_VERSION" ]; then
  tar -xzf binutils-$BINUTILS_VERSION.tar.gz
fi
  cd binutils-$BINUTILS_VERSION
  ./configure --target=$TARGET --prefix=$PREFIX --disable-nls
  make -j$NUM_PROC
  sudo make -j$NUM_PROC install
  cd ..
}

build_gcc() {
if ! [ -f " gcc-$GCC_VERSION.tar.gz" ]; then
  curl -o  gcc-$GCC_VERSION.tar.gz --ftp-pasv  https://sourceware.org/pub/gcc/releases/gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.gz
fi
 if ! [ -d "gcc-$GCC_VERSION" ]; then
  tar -xzf gcc-$GCC_VERSION.tar.gz
fi  
  cd gcc-$GCC_VERSION
  ./contrib/download_prerequisites
  rm -d -r -f build-gcc
  mkdir build-gcc
  cd build-gcc
  ../configure --target=$TARGET --prefix=$PREFIX --disable-nls --enable-languages=c,c++
  make -j$NUM_PROC all-gcc
  sudo make -j$NUM_PROC install-gcc
  cd ../..
}

build_newlib() {
if ! [ -f " newlib-$NEWLIB_VERSION.tar.gz" ]; then
  curl -O https://sourceware.org/pub/newlib/newlib-$NEWLIB_VERSION.tar.gz
fi
if ! [ -d "newlib-$NEWLIB_VERSION" ]; then
  tar -xzf newlib-$NEWLIB_VERSION.tar.gz
fi
  cd newlib-$NEWLIB_VERSION
  rm -d -r -f build-newlib
  mkdir build-newlib
  cd build-newlib
  ../configure --target=$TARGET --prefix=$PREFIX 
  make
  source ~/.bashrc 
  sudo env "PATH=$PATH" make -j$NUM_PROC install
  cd ../..
}

build_libgcc() {
  export PATH=$PREFIX/bin:$PATH
  if ! [ -f " gcc-$GCC_VERSION.tar.gz" ]; then
  curl -o  gcc-$GCC_VERSION.tar.gz --ftp-pasv  https://sourceware.org/pub/gcc/releases/gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.gz
fi
 if ! [ -d "gcc-$GCC_VERSION" ]; then
  tar -xzf gcc-$GCC_VERSION.tar.gz
fi  
  cd gcc-$GCC_VERSION/build-gcc
  
  make -j$NUM_PROC all-target-libgcc
  sudo env "PATH=$PATH" make -j$NUM_PROC install-target-libgcc
  cd ../..
}

# Build components based on the chosen options
if $BUILD_BINUTILS; then
  build_binutils
fi

if $BUILD_GCC; then
  build_gcc 
fi

if $BUILD_NEWLIB; then
  build_newlib
fi

if $BUILD_LIBGCC; then
  build_libgcc
fi

echo "SH-ELF toolchain installation completed successfully"
if $BUILD_ALL; then
 echo "cleaning up..." 
 cd $HOME
 rm -d -r -f $TOOLCHAIN_DIR
fi
