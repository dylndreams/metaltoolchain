#!/bin/bash

set -e

# Default versions
GCC_VERSION="9.3.0"
BINUTILS_VERSION="2.34"
NEWLIB_VERSION="3.3.0"

# Default directories
PREFIX="/usr/local/sh-elf"
TARGET="sh-elf"
TOOLCHAIN_DIR=$HOME/sh-elf-toolchain

# Parse command-line options
BUILD_GCC=false
BUILD_BINUTILS=false
BUILD_NEWLIB=false
BUILD_ALL=false

while getopts "abgn" OPTION; do
  case $OPTION in
    a)
      BUILD_ALL=true
      ;;
    b)
      BUILD_BINUTILS=true
      ;;
    g)
      BUILD_GCC=true
      ;;
    n)
      BUILD_NEWLIB=true
      ;;
  esac
done

if $BUILD_ALL; then
  BUILD_GCC=true
  BUILD_BINUTILS=true
  BUILD_NEWLIB=true
fi

# Set environment variables
export PATH="$PREFIX/bin:$PATH"
mkdir -p $TOOLCHAIN_DIR
cd $TOOLCHAIN_DIR
export ARCH=$(uname -m)
export NUM_PROC=$(nproc)
export BUILD_MACH="$ARCH-pc-linux-gnu"
export HOST_MACH="$ARCH-pc-linux-gnu"
export PROGRAM_PREFIX="sh2-elf-"
export CC_FOR_TARGET=$TARGET-gcc
export LD_FOR_TARGET=$TARGET-ld
export AS_FOR_TARGET=$TARGET-as
export AR_FOR_TARGET=$TARGET-ar
export RANLIB_FOR_TARGET=$TARGET-ranlib
export newlib_cflags="${newlib_cflags} -DPREFER_SIZE_OVER_SPEED -D__OPTIMIZE_SIZE__"


source ~/.bashrc


# Functions to build each component
build_binutils() {
  wget ftp://sourceware.org/pub/binutils/releases/binutils-$BINUTILS_VERSION.tar.gz
  tar -xzf binutils-$BINUTILS_VERSION.tar.gz
  cd binutils-$BINUTILS_VERSION
  ./configure --target=$TARGET --prefix=$PREFIX --disable-nls \
                                             --build=$BUILD_MACH \
                                             --host=$HOST_MACH \
                                             --disable-werror \
                                             --enable-libssp \
                                             --enable-lto \
                                             --program-prefix=$PROGRAM_PREFIX
  make -j$NUM_PROC
  sudo make -j$NUM_PROC install
  cd ..
}

build_gcc() {
  wget ftp://sourceware.org/pub/gcc/releases/gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.gz
  tar -xzf gcc-$GCC_VERSION.tar.gz
  cd gcc-$GCC_VERSION
  ./contrib/download_prerequisites
  mkdir build-gcc
  cd build-gcc
  ../configure --target=$TARGET --prefix=$PREFIX --disable-nls \
                                      --build=$BUILD_MACH \
                                      --host=$HOST_MACH\
                                      --program-prefix=$PROGRAM_PREFIX \
                                      --enable-languages=c,c++ --with-newlib \
                                      --with-gnu-ld \
                                      --with-gnu-as \
                                      --with-gcc \
                                      --without-headers \
                                      --without-included-gettext \
                                      --enable-lto \
                                      --disable-threads \
                                      --disable-libmudflap \
                                      --disable-libgomp \
                                      --disable-werror \
                                      --disable-libssp \
                                      --disable-shared \
                                      --disable-libgcj \
                                      --disable-libstdcxx \ 
  make -j$NUM_PROC all-gcc
  sudo make -j$NUM_PROC install-gcc
  cd ../..
}

build_newlib() {
  wget ftp://sourceware.org/pub/newlib/newlib-$NEWLIB_VERSION.tar.gz
  tar -xzf newlib-$NEWLIB_VERSION.tar.gz
  cd newlib-$NEWLIB_VERSION
  mkdir build-newlib
  cd build-newlib
  ../configure --target=$TARGET --prefix=$PREFIX \
                            --build=$BUILD_MACH \
                            --host=$HOST_MACH \
                            --program-prefix=$PROGRAM_PREFIX \
                            --enable-target-optspac \
                            --enable-lto \
                            --disable-newlib-supplied-syscalls \
                            --disable-nls
  make
  source ~/.bashrc 
  sudo env "PATH=$PATH" make -j$NUM_PROC install
  cd ../..
}

build_libgcc() {
  export PATH=$PREFIX/bin:$PATH
  cd gcc-$GCC_VERSION/build-gcc
  make -j$NUM_PROC all-target-libgcc
  sudo make -j$NUM_PROC install-target-libgcc
  cd ../..
}

# Build components based on the chosen options
if $BUILD_BINUTILS; then
  build_binutils
fi

if $BUILD_GCC; then
  build_gcc build_libgcc
fi

if $BUILD_NEWLIB; then
  build_newlib
fi

echo "SH-ELF toolchain installation completed successfully"
